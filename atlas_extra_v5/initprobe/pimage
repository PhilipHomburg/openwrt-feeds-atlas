#!/bin/bash

if [ $# -ne 1 ]
then
	echo >&2 "Usage: initprobe dev|test|prod" 
	exit 1
fi

export probe_env=$1

model="atlas-mox"

OPENWRT=$PWD
basedir=${OPENWRT}/$(dirname "$0")

BINDIR=${OPENWRT}/bin/targets/mvebu/cortexa53
OPENSSL=openssl
BASE64=base64
KEYDIR=$HOME/atlas-signing-keys
LOC_ROOTFS_FILE_BASE="turrisos-5.2.7-9882a54c4848e2e282bca435c6aa0025d9fa37df-mvebu-cortexa53-device-ripe-atlas-rootfs.tar"
LOC_ROOTFS_FILE_GZ="$LOC_ROOTFS_FILE_BASE".gz
LOC_ROOTFS_FILE_BZ2="$LOC_ROOTFS_FILE_GZ".bz2
ATLASROOT="${BINDIR}/${LOC_ROOTFS_FILE_GZ}"

if [ ! -d "${KEYDIR}" ]; then
	echo 'Please setup ${KEYDIR}'
	exit 1
fi

for NEEDED in include package tools scripts target toolchain; do
	if [ ! -d "${OPENWRT}/${NEEDED}" ]; then
		echo 'Please execute from an OpenWRT v5 directory'
		exit 1
	fi
done

if ( [ ! -d "${OPENWRT}/build_dir" ] ||
     [ ! -d "${OPENWRT}/staging_dir" ] ||
     [ ! -d "${BINDIR}" ] ||
     [ ! -f "${ATLASROOT}" ] ); then
	echo 'Please execute from a built OpenWRT v5 directory'
	exit 1
fi

case "${probe_env}" in
	prod|test|dev)
		;;

	*)
		echo 'Please specify environment'
		exit 1
		;;
esac

cd "$basedir"

FIRMWARE_APPS_VERSION=$(tar Oxf ${ATLASROOT} ./home/atlas/state/FIRMWARE_APPS_VERSION)
ROOTFS_VERSION="$FIRMWARE_APPS_VERSION"
ROOTFS_FILE="rootfs-$model-$ROOTFS_VERSION.img.bz2"

# The Atlas backend wants bzip2, but schnapps only takes .gz
bzip2 -c <"$BINDIR/$LOC_ROOTFS_FILE_GZ" >"$BINDIR/$LOC_ROOTFS_FILE_BZ2"


if [ $probe_env = "prod" ] ; then
	PREF=""
else
	PREF="-$probe_env"
fi

sigarg=''
if [ $probe_env = "dev" ]
then
	# Sign firmware
	keyname=2021-02-02-dev
	$OPENSSL dgst -sha256 < "$BINDIR/$LOC_ROOTFS_FILE_BZ2" | cut -f2 -d" " > $LOC_ROOTFS_FILE_BASE.hash
	$OPENSSL rsautl -sign -inkey $HOME/atlas-signing-keys/$keyname.private.pem -keyform PEM -in $LOC_ROOTFS_FILE_BASE.hash > $LOC_ROOTFS_FILE_BASE.signature.$keyname
	$BASE64 -w0 < $LOC_ROOTFS_FILE_BASE.signature.$keyname > $LOC_ROOTFS_FILE_BASE.signature.$keyname.asc
	sigarg="--sig 1 $keyname $(cat $LOC_ROOTFS_FILE_BASE.signature.$keyname.asc)"
	rm -f ${LOC_ROOTFS_FILE_BASE}.hash ${LOC_ROOTFS_FILE_BASE}.signature.${keyname} ${LOC_ROOTFS_FILE_BASE}.signature.${keyname}.asc
fi

#exit

scp "$BINDIR/$LOC_ROOTFS_FILE_BZ2" atlas@admin$PREF:$ROOTFS_FILE >/dev/null 2>&1
copyres=$?
if [ $copyres -ne 0 ]; then
	echo "Cannot automatically install firmware on atlas@admin$PREF. Please:"
	echo "- Copy $BINDIR/$LOC_ROOTFS_FILE_BZ2 to atlas@admin$PREF:$ROOTFS_FILE"
	echo -n "- Execute on atlas@admin$PREF "
fi

printf  "./atlas/manage.py import_app -a $model -w $ROOTFS_VERSION -g md5 -f ./$ROOTFS_FILE $sigarg\n"
if [ $copyres -eq 0 ]; then
	ssh atlas@admin$PREF "./atlas/manage.py import_app -a $model -w $ROOTFS_VERSION -g md5 -f ./$ROOTFS_FILE $sigarg"
fi
